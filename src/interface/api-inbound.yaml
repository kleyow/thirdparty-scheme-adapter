openapi: 3.0.1
info:
  title: Mojaloop Thirdparty Inbound Scheme Adapter
  version: 0.1.0
  description: Thirdparty Inbound Scheme Adapter
  license:
    name: >-
      Open API for FSP Interoperability (FSPIOP) (Implementation Friendly
      Version)
    url: /
servers:
  - url: ''
paths:
  /health:
    get:
      tags:
        - health
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
      operationId: HealthGet
      summary: Get Server
      description: >-
        The HTTP request GET /health is used to return the current status of the
        API.
  /metrics:
    get:
      tags:
        - metrics
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /hello:
    get:
      tags:
        - metrics
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
      operationId: HelloGet
      summary: example get
      description: The HTTP request GET /hello is used to return some example json.
  /thirdpartyRequests/transactions:
    post:
      requestBody:
        description: Transaction request to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThirdpartyRequestsTransactionsPostRequest'
            example:
              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6
              sourceAccountId: dfspa.alice.1234
              consentId: 43660c2b-cc31-4dd3-a466-4a4b121d0d82
              payee:
                partyIdInfo:
                  partyIdType: MSISDN
                  partyIdentifier: +44 1234 5678
                  fspId: dfspb
              payer:
                personalInfo:
                  complexName:
                    firstName: Alice
                    lastName: K
                partyIdInfo:
                  partyIdType: MSISDN
                  partyIdentifier: +44 8765 4321
                  fspId: dfspa
              amountType: SEND
              amount:
                amount: '100'
                currency: USD
              transactionType:
                scenario: TRANSFER
                initiator: PAYER
                initiatorType: CONSUMER
              expiration: '2020-07-15T22:17:28.985-01:00'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
      operationId: ThirdpartyRequestsTransactionsPost
      summary: example get
      description: >-
        The HTTP request POST /thirdpartyRequests/transactions is used to create
        a thirdparty transaction.
components:
  responses:
    '200':
      description: OK
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '405':
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '406':
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '501':
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
      headers:
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
  headers:
    Content-Length:
      required: false
      schema:
        type: integer
      description: >-
        The `Content-Length` header field indicates the anticipated size of the
        payload body. Only sent if there is a body.


        **Note:** The API supports a maximum size of 5242880 bytes (5
        Megabytes).
    Content-Type:
      schema:
        type: string
      required: true
      description: >-
        The `Content-Type` header indicates the specific version of the API used
        to send the payload body.
  schemas:
    ErrorCode:
      title: ErrorCode
      type: string
      pattern: '^[1-9]\d{3}$'
      description: >-
        The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represent the specific error.
    ErrorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.
    ExtensionKey:
      title: ExtensionKey
      type: string
      minLength: 1
      maxLength: 32
      description: Extension key.
    ExtensionValue:
      title: ExtensionValue
      type: string
      minLength: 1
      maxLength: 128
      description: Extension value.
    Extension:
      title: Extension
      type: object
      description: Data model for the complex type Extension.
      properties:
        key:
          $ref: '#/components/schemas/ExtensionKey'
        value:
          $ref: '#/components/schemas/ExtensionValue'
      required:
        - key
        - value
    ExtensionList:
      title: ExtensionList
      type: object
      description: >-
        Data model for the complex type ExtensionList. An optional list of
        extensions, specific to deployment.
      properties:
        extension:
          type: array
          items:
            $ref: '#/components/schemas/Extension'
          minItems: 1
          maxItems: 16
          description: Number of Extension elements.
      required:
        - extension
    ErrorInformation:
      title: ErrorInformation
      type: object
      description: Data model for the complex type ErrorInformation.
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        errorDescription:
          $ref: '#/components/schemas/ErrorDescription'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - errorCode
        - errorDescription
    ErrorInformationResponse:
      title: ErrorInformationResponse
      type: object
      description: >-
        Data model for the complex type object that contains an optional element
        ErrorInformation used along with 4xx and 5xx responses.
      properties:
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
    CorrelationId:
      title: CorrelationId
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Identifier that correlates all messages of the same sequence. The API
        data type UUID (Universally Unique Identifier) is a JSON String in
        canonical format, conforming to [RFC
        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
        regular expression for interoperability reasons. A UUID is always 36
        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    AccountAddress:
      title: AccountAddress
      type: string
      description: >
        A long-lived unique account identifier provided by the DFSP. This MUST
        NOT

        be Bank Account Number or anything that may expose a User's private bank

        account information.
      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
      minLength: 1
      maxLength: 1023
    Currency:
      title: Currency
      description: >-
        The currency codes defined in [ISO
        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter
        alphabetic codes are used as the standard naming representation for
        currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SPL
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TVD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XDR
        - XOF
        - XPF
        - YER
        - ZAR
        - ZMW
        - ZWD
    Name:
      title: Name
      type: string
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: >-
        The API data type Name is a JSON String, restricted by a regular
        expression to avoid characters which are generally not used in a name.


        Regular Expression - The regular expression for restricting the Name
        type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a
        string consisting of whitespace only, all Unicode characters are
        allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)
        and space characters ( ).


        **Note:** In some programming languages, Unicode support must be
        specifically enabled. For example, if Java is used, the flag
        UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
    Account:
      title: Account
      type: object
      description: Data model for the complex type Account.
      properties:
        address:
          $ref: '#/components/schemas/AccountAddress'
        currency:
          $ref: '#/components/schemas/Currency'
        description:
          $ref: '#/components/schemas/Name'
      required:
        - currency
    AccountList:
      title: AccountList
      type: object
      description: Data model for the complex type AccountList.
      properties:
        account:
          type: array
          items:
            $ref: '#/components/schemas/Account'
          minItems: 1
          maxItems: 32
          description: Accounts associated with the Party.
      required:
        - account
    PartyIdType:
      title: PartyIdType
      type: string
      enum:
        - MSISDN
        - EMAIL
        - PERSONAL_ID
        - BUSINESS
        - DEVICE
        - ACCOUNT_ID
        - IBAN
        - ALIAS
        - CONSENT
        - THIRD_PARTY_LINK
      description: >
        This is a variant based on FSPIOP `PartyIdType` specification.

        Main difference being the CONSENT and THIRD_PARTY_LINK enums.


        Below are the allowed values for the enumeration.

        - MSISDN - An MSISDN (Mobile Station International Subscriber Directory

        Number, that is, the phone number) is used as reference to a
        participant.

        The MSISDN identifier should be in international format according to the

        [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).

        Optionally, the MSISDN may be prefixed by a single plus sign, indicating
        the

        international prefix.

        - EMAIL - An email is used as reference to a

        participant. The format of the email should be according to the
        informational

        [RFC 3696](https://tools.ietf.org/html/rfc3696).

        - PERSONAL_ID - A personal identifier is used as reference to a
        participant.

        Examples of personal identification are passport number, birth
        certificate

        number, and national registration number. The identifier number is added
        in

        the PartyIdentifier element. The personal identifier type is added in
        the

        PartySubIdOrType element.

        - BUSINESS - A specific Business (for example, an organization or a
        company)

        is used as reference to a participant. The BUSINESS identifier can be in
        any

        format. To make a transaction connected to a specific username or bill
        number

        in a Business, the PartySubIdOrType element should be used.

        - DEVICE - A specific device (for example, a POS or ATM) ID connected to
        a

        specific business or organization is used as reference to a Party.

        For referencing a specific device under a specific business or
        organization,

        use the PartySubIdOrType element.

        - ACCOUNT_ID - A bank account number or FSP account ID should be used as

        reference to a participant. The ACCOUNT_ID identifier can be in any
        format,

        as formats can greatly differ depending on country and FSP.

        - IBAN - A bank account number or FSP account ID is used as reference to
        a

        participant. The IBAN identifier can consist of up to 34 alphanumeric

        characters and should be entered without whitespace.

        - ALIAS An alias is used as reference to a participant. The alias should
        be

        created in the FSP as an alternative reference to an account owner.

        Another example of an alias is a username in the FSP system.

        The ALIAS identifier can be in any format. It is also possible to use
        the

        PartySubIdOrType element for identifying an account under an Alias
        defined

        by the PartyIdentifier.

        - CONSENT - TBD

        - THIRD_PARTY_LINK - TBD
      example: PERSONAL_ID
    PartyIdentifier:
      title: PartyIdentifier
      type: string
      minLength: 1
      maxLength: 128
      description: Identifier of the Party.
    PartySubIdOrType:
      title: PartySubIdOrType
      type: string
      minLength: 1
      maxLength: 128
      description: >-
        Either a sub-identifier of a PartyIdentifier, or a sub-type of the
        PartyIdType, normally a PersonalIdentifierType.
    FspId:
      title: FspId
      type: string
      minLength: 1
      maxLength: 32
      description: FSP identifier.
    PartyIdInfo:
      title: PartyIdInfo
      type: object
      description: Data model for the complex type PartyIdInfo.
      properties:
        partyIdType:
          $ref: '#/components/schemas/PartyIdType'
        partyIdentifier:
          $ref: '#/components/schemas/PartyIdentifier'
        partySubIdOrType:
          $ref: '#/components/schemas/PartySubIdOrType'
        fspId:
          $ref: '#/components/schemas/FspId'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      required:
        - partyIdType
        - partyIdentifier
    MerchantClassificationCode:
      title: MerchantClassificationCode
      type: string
      pattern: '^[\d]{1,4}$'
      description: >-
        A limited set of pre-defined numbers. This list would be a limited set
        of numbers identifying a set of popular merchant types like School Fees,
        Pubs and Restaurants, Groceries, etc.
    PartyName:
      title: PartyName
      type: string
      minLength: 1
      maxLength: 128
      description: Name of the Party. Could be a real name or a nickname.
    FirstName:
      title: FirstName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: First name of the Party (Name Type).
    MiddleName:
      title: MiddleName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Middle name of the Party (Name Type).
    LastName:
      title: LastName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Last name of the Party (Name Type).
    PartyComplexName:
      title: PartyComplexName
      type: object
      description: Data model for the complex type PartyComplexName.
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        middleName:
          $ref: '#/components/schemas/MiddleName'
        lastName:
          $ref: '#/components/schemas/LastName'
    DateOfBirth:
      title: DateofBirth (type Date)
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      description: Date of Birth of the Party.
    PartyPersonalInfo:
      title: PartyPersonalInfo
      type: object
      description: Data model for the complex type PartyPersonalInfo.
      properties:
        complexName:
          $ref: '#/components/schemas/PartyComplexName'
        dateOfBirth:
          $ref: '#/components/schemas/DateOfBirth'
    Party:
      title: Party
      type: object
      description: Data model for the complex type Party.
      properties:
        accounts:
          $ref: '#/components/schemas/AccountList'
        partyIdInfo:
          $ref: '#/components/schemas/PartyIdInfo'
        merchantClassificationCode:
          $ref: '#/components/schemas/MerchantClassificationCode'
        name:
          $ref: '#/components/schemas/PartyName'
        personalInfo:
          $ref: '#/components/schemas/PartyPersonalInfo'
      required:
        - partyIdInfo
    AmountType:
      title: AmountType
      type: string
      enum:
        - SEND
        - RECEIVE
      description: >-
        Below are the allowed values for the enumeration AmountType.

        - SEND - Amount the Payer would like to send, that is, the amount that
        should be withdrawn from the Payer account including any fees.

        - RECEIVE - Amount the Payer would like the Payee to receive, that is,
        the amount that should be sent to the receiver exclusive of any fees.
    Amount:
      title: Amount
      type: string
      pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
      description: >-
        The API data type Amount is a JSON String in a canonical format that is
        restricted by a regular expression for interoperability reasons. This
        pattern does not allow any trailing zeroes at all, but allows an amount
        without a minor currency unit. It also only allows four digits in the
        minor currency unit; a negative value is not allowed. Using more than 18
        digits in the major currency unit is not allowed.
    Money:
      title: Money
      type: object
      description: Data model for the complex type Money.
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          $ref: '#/components/schemas/Amount'
      required:
        - currency
        - amount
    TransactionScenario:
      title: TransactionScenario
      type: string
      enum:
        - DEPOSIT
        - WITHDRAWAL
        - TRANSFER
        - PAYMENT
        - REFUND
      description: >-
        Below are the allowed values for the enumeration.

        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a
        normal scenario, electronic funds are transferred from a Business
        account to a Consumer account, and physical cash is given from the
        Consumer to the Business User.

        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.
        In a normal scenario, electronic funds are transferred from a Consumer’s
        account to a Business account, and physical cash is given from the
        Business User to the Consumer.

        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to
        Consumer) transaction.

        - PAYMENT - Usually used for performing a transaction from a Consumer to
        a Merchant or Organization, but could also be for a B2B (Business to
        Business) payment. The transaction could be online for a purchase in an
        Internet store, in a physical store where both the Consumer and Business
        User are present, a bill payment, a donation, and so on.

        - REFUND - Used for performing a refund of transaction.
    TransactionSubScenario:
      title: TransactionSubScenario
      type: string
      pattern: '^[A-Z_]{1,32}$'
      description: >-
        Possible sub-scenario, defined locally within the scheme (UndefinedEnum
        Type).
    TransactionInitiator:
      title: TransactionInitiator
      type: string
      enum:
        - PAYER
        - PAYEE
      description: >-
        Below are the allowed values for the enumeration.

        - PAYER - Sender of funds is initiating the transaction. The account to
        send from is either owned by the Payer or is connected to the Payer in
        some way.

        - PAYEE - Recipient of the funds is initiating the transaction by
        sending a transaction request. The Payer must approve the transaction,
        either automatically by a pre-generated OTP or by pre-approval of the
        Payee, or by manually approving in his or her own Device.
    TransactionInitiatorType:
      title: TransactionInitiatorType
      type: string
      enum:
        - CONSUMER
        - AGENT
        - BUSINESS
        - DEVICE
      description: |-
        Below are the allowed values for the enumeration.
        - CONSUMER - Consumer is the initiator of the transaction.
        - AGENT - Agent is the initiator of the transaction.
        - BUSINESS - Business is the initiator of the transaction.
        - DEVICE - Device is the initiator of the transaction.
    RefundReason:
      title: RefundReason
      type: string
      minLength: 1
      maxLength: 128
      description: Reason for the refund.
    Refund:
      title: Refund
      type: object
      description: Data model for the complex type Refund.
      properties:
        originalTransactionId:
          $ref: '#/components/schemas/CorrelationId'
        refundReason:
          $ref: '#/components/schemas/RefundReason'
      required:
        - originalTransactionId
    BalanceOfPayments:
      title: BalanceOfPayments
      type: string
      pattern: '^[1-9]\d{2}$'
      description: >-
        (BopCode) The API data type
        [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String
        of 3 characters, consisting of digits only. Negative numbers are not
        allowed. A leading zero is not allowed.
    TransactionType:
      title: TransactionType
      type: object
      description: Data model for the complex type TransactionType.
      properties:
        scenario:
          $ref: '#/components/schemas/TransactionScenario'
        subScenario:
          $ref: '#/components/schemas/TransactionSubScenario'
        initiator:
          $ref: '#/components/schemas/TransactionInitiator'
        initiatorType:
          $ref: '#/components/schemas/TransactionInitiatorType'
        refundInfo:
          $ref: '#/components/schemas/Refund'
        balanceOfPayments:
          $ref: '#/components/schemas/BalanceOfPayments'
      required:
        - scenario
        - initiator
        - initiatorType
    ThirdpartyRequestsTransactionsPostRequest:
      title: ThirdpartyRequestsTransactionsPostRequest
      type: object
      description: The object sent in the POST /thirdpartyRequests/transactions request.
      properties:
        transactionRequestId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            Common ID between the FSPs for the transaction request object. The
            ID should be reused for resends of the same transaction request. A
            new ID should be generated for each new transaction request.
        sourceAccountId:
          allOf:
            - $ref: '#/components/schemas/AccountAddress'
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        consentId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            Common ID between the PISP and FSP for the Consent object This tells
            DFSP and auth-service which constent allows the PISP to initiate
            transaction.
        payee:
          allOf:
            - $ref: '#/components/schemas/Party'
          description: Information about the Payee in the proposed financial transaction.
        payer:
          allOf:
            - $ref: '#/components/schemas/Party'
          description: Information about the Payer in the proposed financial transaction.
        amountType:
          allOf:
            - $ref: '#/components/schemas/AmountType'
          description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
        amount:
          allOf:
            - $ref: '#/components/schemas/Money'
          description: Requested amount to be transferred from the Payer to Payee.
        transactionType:
          allOf:
            - $ref: '#/components/schemas/TransactionType'
          description: Type of transaction.
        expiration:
          type: string
          description: >
            Date and time until when the transaction request is valid. It can be
            set to get a quick failure in case the peer FSP takes too long to
            respond.
          example: '2016-05-24T08:38:08.699-04:00'
      required:
        - transactionRequestId
        - sourceAccountId
        - consentId
        - payee
        - payer
        - amountType
        - amount
        - transactionType
        - expiration
